services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: painaidee_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d painaidee_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    profiles:
      - loadbalancer

  # Flask Web Application
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://user:password@db:5432/painaidee_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379/0
      - BACKUP_DIR=/app/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - backup_data:/app/backups
    command: ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "--timeout", "120", "run:app"]

  # Celery Worker for General Tasks
  celery_worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/painaidee_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKUP_DIR=/app/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - backup_data:/app/backups
    command: ["celery", "-A", "tasks.celery", "worker", "--loglevel=info", "--queues=default", "--concurrency=2"]

  # Celery Worker for Heavy Tasks (ETL, Geocoding)
  celery_worker_heavy:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/painaidee_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKUP_DIR=/app/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - backup_data:/app/backups
    command: ["celery", "-A", "tasks.celery", "worker", "--loglevel=info", "--queues=heavy", "--concurrency=1"]
    profiles:
      - scaling

  # Celery Worker for Light Tasks (Cleanup, Backup)  
  celery_worker_light:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/painaidee_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKUP_DIR=/app/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - backup_data:/app/backups
    command: ["celery", "-A", "tasks.celery", "worker", "--loglevel=info", "--queues=light", "--concurrency=4"]
    profiles:
      - scaling

  # Celery Beat Scheduler
  celery_beat:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/painaidee_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKUP_DIR=/app/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - backup_data:/app/backups
    command: ["celery", "-A", "scheduler.celery_app", "beat", "--loglevel=info"]

  # Flower Dashboard (Optional - can be enabled later)
  flower:
    build: .
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - .:/app
    command: ["celery", "-A", "tasks.celery", "flower", "--host=0.0.0.0", "--port=5555"]
    profiles:
      - flower  # Only start when explicitly requested

volumes:
  postgres_data:
  redis_data:
  backup_data: