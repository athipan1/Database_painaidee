#!/usr/bin/env python3
"""
Example script demonstrating TAT Open Data ETL functionality.
This script shows how to use the new TAT CSV ETL pipeline.
"""

import logging
import sys
from etl_orchestrator import ETLOrchestrator

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def main():
    """Example of running TAT CSV ETL pipeline."""
    print("üöÄ TAT Open Data ETL Example")
    print("=" * 50)
    
    # TAT Open Data CSV URL from the problem statement
    csv_url = "https://opendata.tourismthailand.org/data/attractions.csv"
    
    print(f"üìä CSV URL: {csv_url}")
    print(f"üîß Geocoding: Disabled (for demo)")
    print()
    
    try:
        print("üîÑ Running TAT CSV ETL process...")
        
        # Run the ETL process
        result = ETLOrchestrator.run_tat_csv_etl(
            csv_url=csv_url,
            timeout=60,  # Longer timeout for real CSV download
            enable_geocoding=False,  # Disable to avoid API requirements
            google_api_key=None
        )
        
        print("‚úÖ ETL Process completed successfully!")
        print()
        print("üìà Results:")
        print(f"   ‚Ä¢ Total processed: {result.get('total_processed', 0)}")
        print(f"   ‚Ä¢ Successfully saved: {result.get('saved', 0)}")
        print(f"   ‚Ä¢ Updated: {result.get('updated', 0)}")
        print(f"   ‚Ä¢ Skipped (duplicates): {result.get('skipped', 0)}")
        print(f"   ‚Ä¢ Errors: {result.get('errors', 0)}")
        
        if result.get('errors', 0) > 0:
            print(f"‚ö†Ô∏è  Some items had errors during processing")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå ETL process failed: {e}")
        logger.exception("Detailed error information:")
        return 1


def demo_with_sample_data():
    """Demo with sample data (no network required)."""
    print("üß™ Demo with Sample Data (No Network Required)")
    print("=" * 50)
    
    try:
        from extractors.tat_csv import TATCSVExtractor
        from transformers.attraction_transformer import AttractionTransformer
        import tempfile
        import unittest.mock
        
        # Sample TAT CSV data
        sample_csv = """‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà,‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î,‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î,‡∏≠‡∏≥‡πÄ‡∏†‡∏≠,‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î,‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î,‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó,‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î,‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°,‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß,‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢,‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£,‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£,13.7515,100.4924,‡∏ß‡∏±‡∏î,08:30-15:30,500 ‡∏ö‡∏≤‡∏ó,02-123-4567
‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢,‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå,‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢,‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢,17.0238,99.7033,‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô,06:00-18:00,100 ‡∏ö‡∏≤‡∏ó,055-123-456
‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å,‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á,‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ,‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å,13.5177,99.9551,‡∏ï‡∏•‡∏≤‡∏î,07:00-17:00,‡∏ü‡∏£‡∏µ,032-123-456"""
        
        # Mock the HTTP request
        class MockResponse:
            def __init__(self, content):
                self.content = content.encode('utf-8')
            
            def raise_for_status(self):
                pass
        
        with unittest.mock.patch('requests.get') as mock_get:
            mock_get.return_value = MockResponse(sample_csv)
            
            # Run ETL with sample data
            result = ETLOrchestrator.run_tat_csv_etl(
                csv_url="http://sample.com/attractions.csv",
                timeout=30,
                enable_geocoding=False
            )
        
        print("‚úÖ Sample data ETL completed!")
        print()
        print("üìà Results:")
        print(f"   ‚Ä¢ Total processed: {result.get('total_processed', 0)}")
        print(f"   ‚Ä¢ Successfully saved: {result.get('saved', 0)}")
        print(f"   ‚Ä¢ Updated: {result.get('updated', 0)}")
        print(f"   ‚Ä¢ Skipped (duplicates): {result.get('skipped', 0)}")
        print(f"   ‚Ä¢ Errors: {result.get('errors', 0)}")
        
        print()
        print("üéØ Sample attractions processed:")
        print("   ‚Ä¢ ‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£)")
        print("   ‚Ä¢ ‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢ (‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢)")
        print("   ‚Ä¢ ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å (‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ)")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Sample data demo failed: {e}")
        logger.exception("Detailed error information:")
        return 1


if __name__ == "__main__":
    print("Choose demo mode:")
    print("1. Sample data demo (no network required)")
    print("2. Real TAT Open Data (requires network)")
    print()
    
    choice = input("Enter choice (1 or 2, default=1): ").strip() or "1"
    print()
    
    if choice == "1":
        sys.exit(demo_with_sample_data())
    elif choice == "2":
        sys.exit(main())
    else:
        print("Invalid choice. Using sample data demo.")
        sys.exit(demo_with_sample_data())