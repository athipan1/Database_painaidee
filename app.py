#!/usr/bin/env python3
"""
Hugging Face Spaces compatible app.py
A simplified Gradio interface for Database Painaidee API
"""

import gradio as gr
import requests
import json
import os
import sqlite3
from typing import Dict, List, Any

# Simple in-memory database for demo purposes (since HF Spaces has limitations)
class SimpleDB:
    def __init__(self):
        self.attractions = [
            {
                "id": 1,
                "name": "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
                "name_en": "Temple of the Emerald Buddha",
                "province": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                "province_en": "Bangkok",
                "description": "‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏®‡∏≤‡∏™‡∏ô‡∏≤",
                "category": "‡∏ß‡∏±‡∏î",
                "latitude": 13.7527,
                "longitude": 100.4925
            },
            {
                "id": 2,
                "name": "‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á",
                "name_en": "Grand Palace",
                "province": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", 
                "province_en": "Bangkok",
                "description": "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
                "category": "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á",
                "latitude": 13.7500,
                "longitude": 100.4927
            },
            {
                "id": 3,
                "name": "‡πÄ‡∏Å‡∏≤‡∏∞‡∏û‡∏µ‡∏û‡∏µ",
                "name_en": "Phi Phi Islands",
                "province": "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà",
                "province_en": "Krabi", 
                "description": "‡πÄ‡∏Å‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏ó‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥",
                "category": "‡πÄ‡∏Å‡∏≤‡∏∞",
                "latitude": 7.7407,
                "longitude": 98.7784
            }
        ]
    
    def search_attractions(self, query: str = "", province: str = "", category: str = "") -> List[Dict]:
        results = self.attractions.copy()
        
        if query:
            results = [a for a in results if query.lower() in a['name'].lower() or 
                      query.lower() in a['name_en'].lower() or
                      query.lower() in a['description'].lower()]
        
        if province:
            results = [a for a in results if province.lower() in a['province'].lower() or 
                      province.lower() in a['province_en'].lower()]
        
        if category:
            results = [a for a in results if category.lower() in a['category'].lower()]
        
        return results

# Initialize database
db = SimpleDB()

def search_attractions(query: str, province: str, category: str) -> str:
    """Search for attractions based on criteria"""
    try:
        results = db.search_attractions(query, province, category)
        
        if not results:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç / No attractions found matching the criteria"
        
        output = f"**‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {len(results)} ‡πÅ‡∏´‡πà‡∏á / Found {len(results)} attractions:**\n\n"
        
        for attraction in results:
            output += f"üèõÔ∏è **{attraction['name']}** ({attraction['name_en']})\n"
            output += f"üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {attraction['province']} / Province: {attraction['province_en']}\n"
            output += f"üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {attraction['category']} / Category: {attraction['category']}\n"
            output += f"üìù {attraction['description']}\n"
            output += f"üåç ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {attraction['latitude']}, {attraction['longitude']}\n"
            output += "---\n"
        
        return output
        
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î / Error: {str(e)}"

def get_api_info() -> str:
    """Get API information"""
    info = """
# üöÄ Database Painaidee API - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß

**‡πÑ‡∏õ‡πÑ‡∏´‡∏ô‡∏î‡∏µ** - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞ Big Data

## ‚ú® ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å / Main Features:
- üèõÔ∏è **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢** / Thai attractions database
- ü§ñ **AI-Powered Intelligence** - ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
- üìä **Behavior Analytics** - ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
- üó∫Ô∏è **Auto-Geocoding** - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‚ö° **Real-time Dashboard** - ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå

## üîó API Endpoints:
- `GET /api/attractions` - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
- `POST /api/attractions/sync` - ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
- `GET /api/dashboard/` - ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
- `POST /api/ai/keywords/extract` - ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏î‡πâ‡∏ß‡∏¢ AI
- `POST /api/behavior/track` - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

## üõ†Ô∏è ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ / Technology Stack:
- **Backend**: Flask + PostgreSQL + Redis
- **Background Tasks**: Celery
- **AI/ML**: Transformers, Scikit-learn
- **Containerization**: Docker + Docker Compose
- **Load Balancing**: Nginx

---
*‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Demo ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏õ‡∏£‡∏î‡∏î‡∏π Repository ‡∏´‡∏•‡∏±‡∏Å*
*This is a demo version. For full functionality, please refer to the main repository.*
    """
    return info

def get_sample_queries() -> str:
    """Get sample search queries"""
    return """
## üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / Sample Queries:

**‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ / Search by name:**
- ‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß
- Grand Palace
- ‡πÄ‡∏Å‡∏≤‡∏∞‡∏û‡∏µ‡∏û‡∏µ

**‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î / Search by province:**
- ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£
- Bangkok  
- ‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà
- Krabi

**‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó / Search by category:**
- ‡∏ß‡∏±‡∏î (Temple)
- ‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á (Palace)
- ‡πÄ‡∏Å‡∏≤‡∏∞ (Island)

**‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏° / Combined search:**
- ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
- Enter multiple search terms together
    """

# Create Gradio interface
with gr.Blocks(title="Database Painaidee API Demo", theme=gr.themes.Soft()) as app:
    gr.HTML("""
    <div style="text-align: center; padding: 20px;">
        <h1>üèõÔ∏è Database Painaidee API Demo</h1>
        <h2>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢</h2>
        <p><strong>Thai Attractions Database Management System</strong></p>
    </div>
    """)
    
    with gr.Tabs():
        with gr.Tab("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß / Search Attractions"):
            with gr.Row():
                with gr.Column():
                    query_input = gr.Textbox(
                        label="‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / Search Query",
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß / Attraction name",
                        value=""
                    )
                    province_input = gr.Textbox(
                        label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î / Province", 
                        placeholder="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£, Bangkok",
                        value=""
                    )
                    category_input = gr.Textbox(
                        label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó / Category",
                        placeholder="‡∏ß‡∏±‡∏î, ‡πÄ‡∏Å‡∏≤‡∏∞, ‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á",
                        value=""
                    )
                    search_btn = gr.Button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / Search", variant="primary")
                
                with gr.Column():
                    results_output = gr.Markdown(
                        label="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / Search Results",
                        value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß / Ready to search attractions"
                    )
            
            search_btn.click(
                fn=search_attractions,
                inputs=[query_input, province_input, category_input],
                outputs=results_output
            )
        
        with gr.Tab("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API / API Info"):
            api_info_output = gr.Markdown(value=get_api_info())
        
        with gr.Tab("üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô / Usage Examples"):
            examples_output = gr.Markdown(value=get_sample_queries())
    
    gr.HTML("""
    <div style="text-align: center; padding: 20px; margin-top: 20px; border-top: 1px solid #eee;">
        <p><strong>üöÄ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö / For full functionality:</strong></p>
        <p>
            <a href="https://github.com/athipan1/Database_painaidee" target="_blank" 
               style="margin: 0 10px; padding: 8px 16px; background: #007bff; color: white; text-decoration: none; border-radius: 4px;">
                üìÇ GitHub Repository
            </a>
            <a href="https://colab.research.google.com/github/athipan1/Database_painaidee/blob/main/Database_Painaidee_Colab.ipynb" target="_blank"
               style="margin: 0 10px; padding: 8px 16px; background: #f57c00; color: white; text-decoration: none; border-radius: 4px;">
                üìì Run on Colab
            </a>
        </p>
    </div>
    """)

if __name__ == "__main__":
    app.launch()